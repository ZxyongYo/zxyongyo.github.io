<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js数组和对象循环遍历的方法</title>
      <link href="posts/bee75f83/"/>
      <url>posts/bee75f83/</url>
      
        <content type="html"><![CDATA[<h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><h3 id="最常用的for循环"><a href="#最常用的for循环" class="headerlink" title="最常用的for循环"></a>最常用的for循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]) <span class="comment">// z, x, y, o, n, g</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach 方法"></a>forEach 方法</h3><ul><li>forEach 可以接收两个参数（回调函数, 回调函数中this的值），<strong>如果使用箭头函数，thisArg参数会被忽略</strong></li><li>callback可以接收三个参数 （当前元素，当前元素的索引，当前数组）</li><li>在forEach执行过程中，除抛出异常外，没有办法终止或跳出循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)  <span class="comment">// z, x, o, n, g</span></span><br><span class="line">  <span class="keyword">if</span> (value === <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, arr)</span><br></pre></td></tr></table></figure><hr><h3 id="map-方法"><a href="#map-方法" class="headerlink" title="map 方法"></a>map 方法</h3><ul><li>map方法和forEach类似，接收一个回调函数作为参数，将数组所有成员一次传入函数，</li><li>然后把每次的执行结果组成一个新数组返回，<strong>如果不是为了使用返回值，就不要用map</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.charCodeAt(<span class="number">0</span>)</span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">// [122, 120, 121, 111, 110, 103]</span></span><br></pre></td></tr></table></figure><hr><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter 方法"></a>filter 方法</h3><ul><li>filter方法用来过滤数组，返回满足条件成员组成的一个新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.charCodeAt(<span class="number">0</span>) &gt;= <span class="number">120</span></span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="comment">// const newArr = arr.filter(value =&gt; value.charCodeAt(0) &gt;= 120)</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">// [&#x27;z&#x27;, &#x27;x&#x27;, &#x27;y&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h3 id="some-和-every-方法"><a href="#some-和-every-方法" class="headerlink" title="some 和 every 方法"></a>some 和 every 方法</h3><ul><li>some、every方法功能和用法都相似，返回一个布尔值，表示数组成员是否符合某种条件</li><li>some 当有一个数组成员符合条件就返回true；every 当全部数组成员符合条件才返回true，否则返回false</li><li><strong>对于空数组 some返回false，every返回true，回调函数都不会执行</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> someRes = arr.some(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.charCodeAt(<span class="number">0</span>) &gt; <span class="number">120</span>  <span class="comment">// 只要有一个charcode大于120就返回true</span></span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="keyword">const</span> everyRes = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.charCodeAt(<span class="number">0</span>) &gt; <span class="number">120</span>  <span class="comment">// charcode大于120才返回true</span></span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="built_in">console</span>.log(someRes, everyRes) <span class="comment">// true, false</span></span><br></pre></td></tr></table></figure><hr><h3 id="reduce-和-reduceRight-方法"><a href="#reduce-和-reduceRight-方法" class="headerlink" title="reduce 和 reduceRight 方法"></a>reduce 和 reduceRight 方法</h3><ul><li>reduce()，reduceRight() 依次处理数组中每个成员，最终累计为一个值；<br>reduce从左到右，reduceRight从右到左</li><li>接收两个参数  回调函数，第一个参数的默认值</li><li>回调函数接收四个参数 前两个参数是必须的，后两个参数是可选的 👇<ol><li>上一次执行返回的累积值，默认为数组的第一个成员</li><li>当前变量，[如果没有指定参数1的默认值] 默认为数组的第二个成员</li><li>当前位置，默认0</li><li>原数组</li></ol></li><li><strong>如果数组为空，没有指定第一个参数的默认值，将抛出异常，如果指定了第一个参数的默认值，callback不会执行，该参数会被直接返回</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> reduceRes = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">previousValue, currentValue, currentIndex, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(previousValue, currentValue)</span><br><span class="line">  <span class="keyword">return</span> previousValue + currentValue</span><br><span class="line">&#125;, <span class="string">&#x27;i am &#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> max = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b ? a : b) <span class="comment">// 找出数组中最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(max) <span class="comment">// z</span></span><br></pre></td></tr></table></figure><hr><h2 id="对象遍历"><a href="#对象遍历" class="headerlink" title="对象遍历"></a>对象遍历</h2><h3 id="for…in-方法"><a href="#for…in-方法" class="headerlink" title="for…in 方法"></a>for…in 方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">10000001</span>,</span><br><span class="line">  name: <span class="string">&#x27;zxyong&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  gender: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, obj[k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Object-keys-Object-values"><a href="#Object-keys-Object-values" class="headerlink" title="Object.keys, Object.values"></a>Object.keys, Object.values</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Object.keys(obj)  // 返回一个由该对象自身的所有属性名组成的数组</span></span><br><span class="line"><span class="comment">  Object.values(obj)  // 返回一个由该对象自身的所有属性值组成的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">10000001</span>,</span><br><span class="line">  name: <span class="string">&#x27;zxyong&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  gender: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key,<span class="built_in">this</span>[key])</span><br><span class="line">&#125;, obj)</span><br></pre></td></tr></table></figure><hr><h3 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames"></a>Object.getOwnPropertyNames</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与 Object.keys类似，返回一个包含自身所有属性名的数组</span></span><br><span class="line"><span class="comment">// 包含不可枚举的属性名</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(arr) <span class="comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;length&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>本篇大部分参考 <a href="https://wangdoc.com/javascript/">阮一峰老师的JavaScript教程</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN网络文档</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo+git搭建自己的博客网站</title>
      <link href="posts/acb03bb7/"/>
      <url>posts/acb03bb7/</url>
      
        <content type="html"><![CDATA[<p>👉 最近偶然在网上看到一个非常漂亮的个人博客网站，突然觉得自己作为一个前端攻城狮(小菜鸡)🙈，也要有一个这样的网站；<font color="red">❤</font>动不如行动，问了度娘后找到了最简便的方法，<font color="#70a1ff">GitHub+Hexo搭建静态博客网站</font>，下面介绍搭建过程，只需简单的几步。</p><h2 id="Hexo-👍"><a href="#Hexo-👍" class="headerlink" title="Hexo 👍"></a>Hexo 👍</h2><p>生成静态博客网页的一个脚手架，<a href="https://hexo.io/zh-cn/">hexo官网</a> 的api教程，插件，主题什么的都非常丰富，有耐心的同学可以去自己摸索一下，我这里只写一下怎么搞一个能跑起来的博客网站。</p><h2 id="安装hexo-🧰"><a href="#安装hexo-🧰" class="headerlink" title="安装hexo 🧰"></a>安装hexo 🧰</h2><p>安装前您的电脑上必须已经安装了 <a href="https://nodejs.org/zh-cn/">Node.js</a> 和 <a href="https://git-scm.com/downloads">Git</a>，如果已经安装这两个工具（不会安装的请自行百度吧），那么您就可以使用npm安装Hexo了，在任意目录打开终端，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="建站-⚔️"><a href="#建站-⚔️" class="headerlink" title="建站 ⚔️"></a>建站 ⚔️</h2><h3 id="初始化Hexo目录"><a href="#初始化Hexo目录" class="headerlink" title="初始化Hexo目录"></a>初始化Hexo目录</h3><p>依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;<span class="comment"># 初始化hexo目录  folder-目录名</span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;<span class="comment"># 进入hexo目录</span></span><br><span class="line">$ npm install<span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>如果以上步骤都正确，那么您现在的hexo目录结构应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><ul><li><p>_config.yml：网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p></li><li><p>package.json：应用的依赖信息。</p></li><li><p>scaffolds：<a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p></li><li><p>source：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p></li><li><p>themes：<a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p></li></ul><h2 id="运行-amp-部署-🚀"><a href="#运行-amp-部署-🚀" class="headerlink" title="运行&amp;部署 🚀"></a>运行&amp;部署 🚀</h2><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>在终端执行<code>hexo server</code>，执行成功后，在浏览器输入<code>localhost:4000</code>，然后回车，如果成功打开页面，那么恭喜🎉，第一步已经成功!</p><blockquote><p>如果执行遇到了报错，可能是因为hexo默认使用的4000端口被占用了，可以使用<code>hexo server -p 4000</code>指定端口运行。</p></blockquote><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>现在网站只是能在本地打开，如果想要随时随地的到处炫耀😎，那么我们要将它部署到GitHub上，这样就可以在任何地方打开了。</p><ol><li><p>新建git仓库</p><p>在自己的 <a href="https://github.com/">GitHub</a>上新建一个仓库*(没有的请自行去注册/登录)*，</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210426170628.png" alt="GitHub新建仓库" title="GitHub新建仓库"></p></li><li><p>配置hexo部署到GitHub</p><p>用您的编辑器打开hexo根目录的<code>_config.yml</code>文件，找到最下面的<code>deploy</code>配置，添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:zxyo/zxyong.git</span> <span class="comment"># 改为您自己刚才建的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p>上面github: 的仓库地址一定要改为您自己的仓库ssh克隆的地址。<br>使用ssh地址而不用https是为了避免每次部署的时候都需要登录github账户。[<a href="">配置ssh</a>]</p></blockquote></li><li><p>部署到gitee</p><p>由于国内对访问GitHub的限制，我们也可以同时部署到gitee，配置方法与配置github相同，然后添加一行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:zxyo/zxyong.git</span> <span class="comment"># 改为您自己的仓库地址</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">git@gitee.com:zxyo/zxyong.git</span> <span class="comment"># 改为您自己的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>确保一切无误后，就可以使用命令部署了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean <span class="comment"># 清除缓存文件</span></span><br><span class="line">$ hexo gnerate <span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo deploy <span class="comment"># 部署到_config.yml中配置的git仓库中</span></span><br></pre></td></tr></table></figure><blockquote><p>在GitHub或Gitee的仓库设置里开启git page，就可以访问到您的博客了✌！<br>Gitee每次部署后都需要去手动更新git page。</p></blockquote></li></ol><h2 id="更换主题-🎨"><a href="#更换主题-🎨" class="headerlink" title="更换主题 🎨"></a>更换主题 🎨</h2><ol><li><p>hexo官网的 <a href="https://hexo.io/themes/">主题</a> 有很多，可以自己去找一个喜欢的，我用的是 <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly</a> 这个主题。</p></li><li><p>找到这个主题的 <a href="https://github.com/jerryc127/hexo-theme-butterfly">GitHub仓库</a> 或 <a href="https://gitee.com/iamjerryw/hexo-theme-butterfly">Gitee仓库</a> clone下来放到你的hexo项目的themes目录下。</p></li><li><p>修改<code>_config.yml</code>文件，把主题改为butterfly：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li><p>安装插件，如果你没有pug和stylus渲染器，执行命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>执行<code>hexo clean &amp; hexo d -g</code>重新打开网页就能看见更换后的样子啦！</p></li><li><p>主题配置</p><p>在<code>/themes/butterfly</code>目录下还有一个<code>_config.yml</code>配置文件，这个是你主题的配置文件，里面配置项很多可以查看 <a href="https://butterfly.js.org/posts/4aa8abbe/">官方文档</a> 进行自由配置。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
